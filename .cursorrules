# REFAKTORYZACJA PROJEKTU: python_projekty → SvelteKit + FastAPI + Ollama

## KONTEKST PROJEKTU
Refaktoryzujesz istniejący projekt Python web app do nowoczesnej architektury:
- **ŹRÓDŁO**: Tradycyjna aplikacja HTML/CSS/JS z integracją AI
- **CEL**: SvelteKit frontend + FastAPI backend + Ollama LLM + AI Agents
- **ARCHITEKTURA**: Modularny monolith z systemem AI agentów

## ZASADY REFAKTORYZACJI

### PODEJŚCIE
- **TYLKO refaktoryzacja** - NIE przepisuj od nowa
- **Incremental approach** - małe, częste zmiany
- **Zachowaj działające features** - backward compatibility
- **Test-first development** - testy przed zmianami
- **Preservuj logikę biznesową** - przenieś, nie zmieniaj

### KOLEJNOŚĆ DZIAŁAŃ
1. **BACKUP** - zawsze zrób kopię przed zmianami
2. **ANALYZE** - zrozum istniejący kod przed refaktorem
3. **MIGRATE** - przenieś funkcjonalność stopniowo
4. **TEST** - zweryfikuj działanie po każdej zmianie
5. **DOCUMENT** - aktualizuj dokumentację

## STRUKTURA DOCELOWA

### FRONTEND - SvelteKit
```
frontend/
├── src/
│   ├── lib/
│   │   ├── components/          # Komponenty UI
│   │   ├── stores/             # Svelte stores
│   │   ├── services/           # API clients
│   │   └── utils/              # Utilities
│   ├── routes/
│   │   ├── (app)/              # Protected routes
│   │   ├── auth/               # Auth pages
│   │   └── api/                # API endpoints (proxy)
│   ├── app.html                # HTML template
│   └── hooks.server.ts         # Server hooks
├── static/                     # Static assets
└── tests/                      # Frontend tests
```

### BACKEND - FastAPI
```
backend/
├── app/
│   ├── api/
│   │   ├── v1/                 # API routes
│   │   └── deps.py             # Dependencies
│   ├── core/
│   │   ├── config.py           # Configuration
│   │   ├── security.py         # Auth & security
│   │   └── database.py         # DB setup
│   ├── models/                 # SQLAlchemy models
│   ├── schemas/                # Pydantic schemas
│   ├── services/               # Business logic
│   │   ├── ai/                 # AI services
│   │   ├── agents/             # AI agents
│   │   └── ollama/             # Ollama integration
│   ├── middleware/             # Custom middleware
│   └── main.py                 # FastAPI app
├── alembic/                    # DB migrations
└── tests/                      # Backend tests
```

## STANDARDY KODOWANIA

### PYTHON (Backend)
- **Type hints** wszędzie - `def func(param: str) -> Dict[str, Any]:`
- **Pydantic models** dla wszystkich schema
- **Async/await** dla I/O operations
- **Dependency injection** w FastAPI
- **Error handling** z custom exceptions
- **Logging** z structured logs

### TYPESCRIPT (Frontend)
- **Strict mode** - `"strict": true`
- **Interfaces** zamiast types gdzie możliwe
- **Svelte stores** dla state management
- **$lib/** imports zamiast relative paths
- **Component props** z TypeScript
- **Error boundaries** w komponentach

### NAMING CONVENTIONS
- **Files**: `kebab-case.ts`, `PascalCase.svelte`
- **Variables**: `camelCase`, `SCREAMING_SNAKE_CASE` dla constów
- **Functions**: `camelCase`, `async` prefix dla async functions
- **Classes**: `PascalCase`
- **Database**: `snake_case` dla tabel i kolumn

## INTEGRACJA AI & OLLAMA

### OLLAMA SETUP
- **Models**: llama3.1, codellama, mistral
- **Local inference** - nie używaj external APIs bez potrzeby
- **Streaming responses** dla real-time chat
- **Model switching** w runtime
- **Resource management** - proper cleanup

### AI AGENTS ARCHITECTURE
```python
# Base agent pattern
class BaseAgent:
    def __init__(self, ollama_client: OllamaClient):
        self.ollama = ollama_client
        self.tools = []
    
    async def process(self, message: str) -> AgentResponse:
        # Implementation
        pass
```

### LANGCHAIN/LANGGRAPH
- **Modular agents** - jeden agent = jedna odpowiedzialność
- **Tool integration** - web search, document retrieval
- **Memory management** - conversation history
- **Error recovery** - graceful degradation

## MIGRATION PATTERNS

### Z HTML/CSS/JS DO SVELTE
```javascript
// STARY SPOSÓB - vanilla JS
document.getElementById('button').addEventListener('click', handler);

// NOWY SPOSÓB - Svelte
<button on:click={handler}>Click me</button>
```

### Z FLASK/DJANGO DO FASTAPI
```python
# STARY SPOSÓB - Flask
@app.route('/api/chat', methods=['POST'])
def chat():
    return jsonify(response)

# NOWY SPOSÓB - FastAPI
@router.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest) -> ChatResponse:
    return response
```

## PERFORMANCE & SECURITY

### OPTIMIZATION
- **Lazy loading** komponentów Svelte
- **API response caching** gdzie możliwe
- **Database query optimization** z proper indexes
- **Static asset optimization** w SvelteKit
- **Bundle size monitoring** - analizuj wielkość

### SECURITY
- **CORS** properly configured
- **Rate limiting** na API endpoints
- **Input validation** z Pydantic
- **SQL injection prevention** z SQLAlchemy
- **JWT tokens** dla auth

## TESTING STRATEGY

### FRONTEND TESTS
- **Unit tests** - Vitest dla utilities
- **Component tests** - @testing-library/svelte
- **E2E tests** - Playwright
- **Type checking** - `svelte-check`

### BACKEND TESTS
- **Unit tests** - pytest dla services
- **Integration tests** - TestClient dla API
- **Database tests** - separate test DB
- **AI agent tests** - mock Ollama responses

## BŁĘDY DO UNIKANIA

### ARCHITEKTURA
❌ **NIE mieszaj** logiki biznesowej z UI komponentami
❌ **NIE używaj** direct database calls w frontend
❌ **NIE ignoruj** TypeScript errors
❌ **NIE commit** bez testów

### AI INTEGRATION
❌ **NIE hardcode** model names
❌ **NIE blokuj** UI podczas AI inference
❌ **NIE przechowuj** sensitive data w prompt history
❌ **NIE używaj** synchronous calls do Ollama

## WORKFLOW COMMANDS

### DEVELOPMENT
```bash
# Backend
cd backend && uvicorn app.main:app --reload --port 8000

# Frontend  
cd frontend && npm run dev -- --port 3000

# Tests
pytest backend/tests/
npm run test frontend/
```

### MIGRATION HELPERS
```bash
# Backup current state
git checkout -b backup-before-refactor

# Create new structure
mkdir -p frontend/src/{lib,routes} backend/app/{api,core,models,schemas,services}

# Install dependencies
pip install fastapi uvicorn sqlalchemy pydantic ollama
npm create svelte@latest frontend
```

## PROMPTS POMOCNICZE

### ANALIZA KODU
"Przeanalizuj ten plik i wyjaśnij jego funkcjonalność, zależności i możliwe miejsca refaktoru"

### MIGRACJA KOMPONENTU  
"Przekonwertuj ten vanilla JS kod do komponentu Svelte, zachowując dokładnie tę samą funkcjonalność"

### STWORZENIE API
"Stwórz FastAPI endpoint dla tej funkcjonalności, używając Pydantic schemas i proper error handling"

### INTEGRACJA OLLAMA
"Dodaj integrację z Ollama do tego serwisu, z obsługą streaming i error recovery"

## CHECKLIST REFAKTORYZACJI

- [ ] Backup kompletny stworzony
- [ ] Struktura folderów utworzona
- [ ] Dependencies zainstalowane
- [ ] Konfiguracja środowiska
- [ ] Migracja logiki biznesowej
- [ ] Testy przeportowane
- [ ] Integracja AI działająca
- [ ] Performance testing
- [ ] Security review
- [ ] Dokumentacja zaktualizowana

---

**PAMIĘTAJ**: Refaktoryzacja to maraton, nie sprint. Rób częste commity, testuj każdą zmianę, zachowuj working state.