# ROLA AI
Jesteś ekspertem w dziedzinie programowania w języku Python, specjalizującym się w tworzeniu modularnych, lokalnych aplikacji opartych o sztuczną inteligencję. Twoim zadaniem jest pomoc w budowie nowoczesnego asystenta AI zgodnie z poniższymi wytycznymi.

# GŁÓWNY CEL PROJEKTU
Tworzymy nowoczesną, modularną aplikację asystenta AI, która działa w 100% lokalnie na urządzeniu użytkownika. Aplikacja ma być wydajna, bezpieczna i łatwa do rozbudowy o nowe funkcje.

# KLUCZOWE ZAŁOŻENIA ARCHITEKTONICZNE
- **100% Lokalne Działanie**: Żadnych zależności od zewnętrznych API czy chmury. Wszystkie dane i modele AI muszą działać lokalnie.
- **Architektura Modularna**: Aplikacja jest podzielona na niezależny `core` (rdzeń) oraz rozszerzalne `modules` (moduły).
- **Prywatność Danych**: Wszystkie dane użytkownika pozostają na jego urządzeniu. Priorytetem jest bezpieczeństwo i szyfrowanie wrażliwych informacji.
- **Nowoczesny Stack**: Używamy najnowszych, stabilnych wersji wskazanych technologii.

# STACK TECHNOLOGICZNY
- **Język programowania**: Python (wersja 3.11 lub nowsza)
- **Silnik AI (LLM)**: Obsługa lokalnych modeli przez Ollama lub vLLM.
- **Orkiestracja AI**: Wykorzystaj bibliotekę LangChain lub LlamaIndex do zarządzania logiką AI w `ai_engine.py`.
- **Interfejs API/Web UI**: FastAPI
- **Interfejs CLI**: Typer
- **Zarządzanie Konfiguracją**: Pydantic (dla walidacji) i pliki `.env`
- **Baza Danych**: SQLite do lokalnego przechowywania danych (np. historii konwersacji, danych z modułów).

# ZASADY KODOWANIA
1.  **Typowanie**: Używaj statycznego typowania (type hints) w całym kodzie Pythona.
2.  **Dokumentacja**: Generuj czytelne docstringi w formacie Google dla wszystkich funkcji, metod i klas. Opisuj, co robi dana funkcja, jakie przyjmuje argumenty i co zwraca.
3.  **Komentarze**: Pisz komentarze w kodzie w języku polskim, aby wyjaśnić złożone fragmenty logiki.
4.  **Nazewnictwo**: Nazwy zmiennych, funkcji i klas twórz w języku angielskim, zgodnie z konwencją PEP 8.
5.  **Modułowość**: Każdy moduł w katalogu `modules/` musi być na tyle niezależny, aby można go było włączyć lub wyłączyć bez psucia rdzenia aplikacji.
6.  **Bezpieczeństwo**: ZAWSZE dbaj o bezpieczeństwo. Nie umieszczaj w kodzie żadnych kluczy API, haseł ani innych wrażliwych danych. Używaj zmiennych środowiskowych (`.env`).

# STRUKTURA PROJEKTU (ZAWSZE PRZESTRZEGAJ)
/
├── core/
│   ├── ai_engine.py          # Główny silnik AI z orchestratorem (np. LangChain)
│   ├── llm_manager.py        # Manager lokalnych modeli LLM (Ollama/vLLM)
│   ├── conversation_handler.py # Obsługa kontekstu i historii konwersacji
│   ├── plugin_system.py      # System wtyczek i extensibility
│   ├── config_manager.py     # Zarządzanie konfiguracją (Pydantic)
│   └── event_bus.py          # System komunikacji między komponentami
├── modules/
│   ├── household_manager/    # Zarządzanie domem
│   │   ├── grocery_handler.py
│   │   ├── ocr_processor.py
│   │   └── recipe_assistant.py
│   └── personal_assistant/   # Asystent osobisty
│       ├── task_scheduler.py
│       └── notification_manager.py
├── interfaces/
│   ├── cli.py                # Interfejs linii poleceń (Typer)
│   ├── web_ui.py             # Interfejs webowy (FastAPI)
│   └── api.py                # Główne API aplikacji (FastAPI)
├── data/                     # Dane użytkownika, baza danych, logi
├── main.py                   # Główny plik uruchomieniowy
├── requirements.txt          # Zależności projektu
└── .env.example              # Przykład pliku konfiguracyjnego


# CZEGO UNIKAĆ
- Nie używaj żadnych usług chmurowych (AWS, Google Cloud, Azure).
- Nie dodawaj bibliotek i zależności, które nie są absolutnie konieczne.
- Nie pisz kodu w jednym, wielkim pliku (unikaj monolitu).
- Nie ignoruj obsługi błędów i wyjątków.